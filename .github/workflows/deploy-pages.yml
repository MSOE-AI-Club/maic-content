name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Generate manifest.json
        run: |
          echo "Generating manifest..."
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');

          function globToRegex(glob) {
            let regexString = glob
              .replace(/[.+?^${}()|[\]\\]/g, '\\$&')
              .replace(/\*/g, '.*');
            return new RegExp('^' + regexString + '$');
          }

          let ignorePatterns = [];
          try {
            const ignoreContent = fs.readFileSync('.manifestignore', 'utf8');
            const patterns = ignoreContent.split(/\r?\n/).filter(line => line.trim() !== '' && !line.startsWith('#'));
            ignorePatterns = patterns.map(globToRegex);
          } catch (err) {
            if (err.code !== 'ENOENT') {
              console.error("Error reading .manifestignore:", err);
            }
          }

          function walkDir(dir, baseDir = dir) {
            const files = fs.readdirSync(dir, { withFileTypes: true });
            return files.flatMap(file => {
              const fullPath = path.join(dir, file.name);
              const relativePath = path.relative(baseDir, fullPath).replace(/\\/g, '/');

              const isIgnored = ignorePatterns.some(regex => regex.test(relativePath));
              if (isIgnored) {
                return [];
              }

              if (file.isDirectory()) {
                return walkDir(fullPath, baseDir);
              } else {
                return [relativePath];
              }
            });
          }

          const fileList = walkDir('.');
          const manifest = { 
            generated_at: new Date().toISOString(), 
            files: fileList,
            cdn_base_url: "https://msoe-ai-club.github.io/maic-content/",
            version: "1.0.0"
          };
          fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2));
          EOF

      - name: Create CDN structure
        run: |
          # Create dist directory for GitHub Pages
          mkdir -p dist
          
          # Copy all content files to dist
          cp -r articles dist/ 2>/dev/null || true
          cp -r data dist/ 2>/dev/null || true
          cp -r images dist/ 2>/dev/null || true
          cp manifest.json dist/
          
          # Copy index.html and headers for GitHub Pages
          cp index.html dist/
          cp _headers dist/
          
          # Create API endpoint structure with proper content-type
          mkdir -p dist/api
          cp manifest.json dist/api/manifest.json
          
          # Create .htaccess file for better API serving (if supported)
          echo 'AddType application/json .json' > dist/.htaccess

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 