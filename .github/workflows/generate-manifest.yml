name: Generate manifest.json

on:
  push:
    branches: '*'

jobs:
  generate-manifest:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Generate manifest.json
      run: |
        echo "Generating manifest..."
        node <<'EOF'
        const fs = require('fs');
        const path = require('path');

        function globToRegex(glob) {
          const specialChars = ['.', '+', '?', '^', '$', '{', '}', '(', ')', '|', '[', ']', '\\'];
          let regexString = glob.replace(/\./g, '\\.'); // Escape literal dots first
          regexString = regexString.replace(/\*/g, '.*'); // Convert * to .* (wildcard)
          // Escape other special regex characters
          specialChars.forEach(char => {
            if (char !== '.' && char !== '*') { // Avoid re-escaping already handled chars
                 regexString = regexString.replace(new RegExp('\\'+char, 'g'), '\\'+char);
            }
          });
          return new RegExp('^' + regexString + '$');
        }

        let ignorePatterns = [];
        try {
          const ignoreContent = fs.readFileSync('.manifestignore', 'utf8');
          ignorePatterns = ignoreContent.split(/\r?\n/).filter(line => line.trim() !== '' && !line.startsWith('#')).map(globToRegex);
        } catch (err) {
          // .manifestignore might not exist, which is fine
          if (err.code !== 'ENOENT') {
            console.error("Error reading .manifestignore:", err);
          }
        }

        function walkDir(dir, baseDir = dir) {
          const files = fs.readdirSync(dir, { withFileTypes: true });
          return files.flatMap(file => {
            const fullPath = path.join(dir, file.name);
            const relativePath = path.relative(baseDir, fullPath).replace(/\\/g, '/');

            // Check against ignore patterns
            if (ignorePatterns.some(regex => regex.test(relativePath))) {
              return []; // Exclude if it matches any pattern - for directories, this skips all contents
            }

            if (file.isDirectory()) {
              // Directory is not ignored, so recurse into it
              return walkDir(fullPath, baseDir);
            } else {
              return [relativePath];
            }
          });
        }

        const fileList = walkDir('.');
        const manifest = { generated_at: new Date().toISOString(), files: fileList };
        fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2));
        EOF

    - name: Commit and push manifest.json
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add manifest.json
        git commit -m "chore: auto-generate manifest.json" || echo "No changes to commit"
        git push
